name: Deploy to VPS (Password Auth)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - app-only
          - setup-only

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
    
    - name: Deploy to VPS (Full Setup)
      if: ${{ github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'setup-only' || github.event_name == 'push' }}
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          echo "================================================"
          echo "üöÄ Starting VPS Setup and Deployment"
          echo "================================================"
          export DEBIAN_FRONTEND=noninteractive
          apt-get update && apt-get upgrade -y
          echo "üì¶ Installing Node.js v20..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          echo "‚úì Node.js installed: $(node --version)"
          if ! command -v psql &> /dev/null; then
            apt-get install -y postgresql postgresql-contrib
            systemctl start postgresql && systemctl enable postgresql
          fi
          if ! command -v redis-cli &> /dev/null; then
            apt-get install -y redis-server
            systemctl start redis-server && systemctl enable redis-server
          fi
          if ! command -v nginx &> /dev/null; then
            apt-get install -y nginx
            systemctl start nginx && systemctl enable nginx
          fi
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          if ! command -v git &> /dev/null; then
            apt-get install -y git
          fi
          echo "‚ú® System setup completed!"
        ENDSSH
    
    - name: Deploy Application
      if: ${{ github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'app-only' || github.event_name == 'push' }}
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} 'bash -s' << 'ENDSSH'
          set -e
          echo "================================================"
          echo "üì¶ Deploying Application"
          echo "================================================"
          DEPLOY_DIR="/root/dashboard"
          if [ -d "$DEPLOY_DIR" ]; then
            cd $DEPLOY_DIR && git fetch origin && git reset --hard origin/main
          else
            cd /root && git clone https://github.com/bengkelkayu/dashboard.git && cd $DEPLOY_DIR
          fi
          npm install --production
          DB_NAME="wedding_dashboard"
          DB_USER="wedding_user"
          DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
          if [ -z "$DB_EXISTS" ]; then
            DB_PASSWORD=$(openssl rand -base64 32)
            USER_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_user WHERE usename = '${DB_USER}'")
            if [ -z "$USER_EXISTS" ]; then
              echo "CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';" | sudo -u postgres psql
            fi
            echo "CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};" | sudo -u postgres psql
            echo "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};" | sudo -u postgres psql
            printf "PORT=3000\nNODE_ENV=production\nDATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:5432/${DB_NAME}\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=${DB_NAME}\nDB_USER=${DB_USER}\nDB_PASSWORD=${DB_PASSWORD}\nREDIS_URL=redis://localhost:6379\nWHATSAPP_API_URL=https://api.whatsapp.com/send\nWHATSAPP_API_KEY=your_api_key_here\nWEBHOOK_SECRET=$(openssl rand -hex 32)\nCORS_ORIGIN=*\n" > .env
            echo "‚úì Database created, Password: ${DB_PASSWORD}"
          fi
          echo "üîç Verifying database schema..."
          if npm run verify-schema; then
            echo "‚úì Schema verification passed"
          else
            echo "‚ö†Ô∏è  Running migrations..."
            npm run migrate && npm run verify-schema || echo "‚ö†Ô∏è  Check logs"
          fi
          printf "server {\n    listen 80;\n    server_name _;\n    client_max_body_size 10M;\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \$host;\n        proxy_set_header X-Real-IP \$remote_addr;\n        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \$scheme;\n        proxy_cache_bypass \$http_upgrade;\n    }\n}\n" > /etc/nginx/sites-available/wedding-dashboard
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl reload nginx
          pm2 delete wedding-api wedding-worker 2>/dev/null || true
          pm2 start backend/src/server.js --name wedding-api
          pm2 start backend/src/workers/thankYouWorker.js --name wedding-worker
          pm2 save
          env PATH=$PATH:/usr/bin pm2 startup systemd -u root --hp /root || true
          if command -v ufw &> /dev/null; then
            ufw allow 22,80,443/tcp && ufw --force enable || true
          fi
          echo "‚ú® Deployment completed! Access: http://$(hostname -I | awk '{print $1}')"
          pm2 status
          
          echo ""
          echo "üîç Final schema verification..."
          cd /root/dashboard
          npm run verify-schema || echo "‚ö†Ô∏è  Schema check failed"
        ENDSSH
    
    - name: Verify Deployment
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        sleep 5
        echo "üîç Verifying deployment..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }})
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ö†Ô∏è  Warning: HTTP code $HTTP_CODE"
        fi
        
        echo ""
        echo "üß™ Testing QR Code functionality..."
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /root/dashboard
          
          echo "Checking QR code columns in database..."
          QR_CHECK=$(psql -U wedding_user -d wedding_dashboard -tAc "
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name='guests' 
            AND column_name IN ('qr_code_token', 'qr_code_url', 'qr_code_generated_at')
          " 2>/dev/null)
          
          if [ "$QR_CHECK" = "3" ]; then
            echo "‚úÖ All QR code columns present"
          else
            echo "‚ö†Ô∏è  QR code columns missing (found: $QR_CHECK/3)"
          fi
          
          echo ""
          echo "PM2 Process Status:"
          pm2 jlist | jq -r '.[] | "  " + .name + ": " + .pm2_env.status'
        ENDSSH
