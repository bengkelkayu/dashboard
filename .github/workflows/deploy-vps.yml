name: Deploy to VPS

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'app-only'
        type: choice
        options:
          - full
          - app-only
          - setup-only

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      DEPLOY_TYPE: ${{ github.event.inputs.deploy_type || 'app-only' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to VPS (Full Setup)
      if: ${{ env.DEPLOY_TYPE == 'full' || env.DEPLOY_TYPE == 'setup-only' }}
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "================================================"
          echo "🚀 Starting VPS Setup and Deployment"
          echo "================================================"
          
          # Update system
          echo "📦 Updating system packages..."
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get upgrade -y
          
          # Install Node.js v18
          echo "📦 Installing Node.js..."
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            echo "✓ Node.js installed: $(node --version)"
          else
            echo "✓ Node.js already installed: $(node --version)"
          fi
          
          # Install PostgreSQL
          echo "📦 Installing PostgreSQL..."
          if ! command -v psql &> /dev/null; then
            apt-get install -y postgresql postgresql-contrib
            systemctl start postgresql
            systemctl enable postgresql
            echo "✓ PostgreSQL installed"
          else
            echo "✓ PostgreSQL already installed"
          fi
          
          # Install Redis
          echo "📦 Installing Redis..."
          if ! command -v redis-cli &> /dev/null; then
            apt-get install -y redis-server
            systemctl start redis-server
            systemctl enable redis-server
            echo "✓ Redis installed"
          else
            echo "✓ Redis already installed"
          fi
          
          # Install Nginx
          echo "📦 Installing Nginx..."
          if ! command -v nginx &> /dev/null; then
            apt-get install -y nginx
            systemctl start nginx
            systemctl enable nginx
            echo "✓ Nginx installed"
          else
            echo "✓ Nginx already installed"
          fi
          
          # Install PM2
          echo "📦 Installing PM2..."
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
            echo "✓ PM2 installed"
          else
            echo "✓ PM2 already installed"
          fi
          
          # Install Git
          if ! command -v git &> /dev/null; then
            apt-get install -y git
            echo "✓ Git installed"
          fi
          
          echo "✨ System setup completed!"
        ENDSSH
    
    - name: Deploy Application
      if: ${{ env.DEPLOY_TYPE == 'full' || env.DEPLOY_TYPE == 'app-only' }}
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "================================================"
          echo "📦 Deploying Application"
          echo "================================================"
          
          # Create deployment directory
          DEPLOY_DIR="/root/dashboard"
          
          # Clone or update repository
          if [ -d "$DEPLOY_DIR" ]; then
            echo "📥 Updating existing repository..."
            cd $DEPLOY_DIR
            git fetch origin
            git reset --hard origin/main
          else
            echo "📥 Cloning repository..."
            cd /root
            git clone https://github.com/bengkelkayu/dashboard.git
            cd $DEPLOY_DIR
          fi
          
          # Install dependencies
          echo "📦 Installing application dependencies..."
          npm install --production
          
          # Setup database if not exists
          echo "🗄️  Setting up database..."
          DB_NAME="wedding_dashboard"
          DB_USER="wedding_user"
          
          # Check if database exists
          DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
          
          if [ -z "$DB_EXISTS" ]; then
            echo "Creating new database..."
            DB_PASSWORD=$(openssl rand -base64 32)
            
            sudo -u postgres psql <<DBEOF
-- Create user if not exists
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '${DB_USER}') THEN
        CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';
    END IF;
END
\$\$;

-- Create database
CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};
GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};
DBEOF
            
            # Create .env file
            cat > .env <<ENVEOF
# Server Configuration
PORT=3000
NODE_ENV=production

# Database Configuration
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:5432/${DB_NAME}
DB_HOST=localhost
DB_PORT=5432
DB_NAME=${DB_NAME}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}

# Redis Configuration
REDIS_URL=redis://localhost:6379

# WhatsApp API Configuration
WHATSAPP_API_URL=https://api.whatsapp.com/send
WHATSAPP_API_KEY=your_api_key_here

# Webhook Secret
WEBHOOK_SECRET=$(openssl rand -hex 32)

# Application Configuration
CORS_ORIGIN=*
ENVEOF
            
            echo "✓ Database and .env created"
            echo "📝 Database Password: ${DB_PASSWORD}"
          else
            echo "✓ Database already exists, skipping creation"
            # Ensure .env exists
            if [ ! -f .env ]; then
              echo "⚠️  Warning: .env file not found. Please create it manually."
            fi
          fi
          
          # Verify database schema before migrations
          echo "🔍 Verifying database schema..."
          if npm run verify-schema; then
            echo "✓ Schema verification passed - no migrations needed"
          else
            echo "⚠️  Schema verification found issues - running migrations..."
            
            # Run migrations
            echo "🗄️  Running database migrations..."
            if npm run migrate; then
              echo "✓ Migrations completed successfully"
              
              # Verify schema again after migrations
              echo "🔍 Re-verifying database schema..."
              if npm run verify-schema; then
                echo "✅ Schema verification passed after migrations!"
              else
                echo "❌ Schema verification failed after migrations - please check manually"
                exit 1
              fi
            else
              echo "❌ Migrations failed"
              echo "Checking migration status..."
              psql -U wedding_user -d wedding_dashboard -c "\dt" 2>/dev/null || echo "Unable to check database tables"
              exit 1
            fi
          fi
          
          # Configure Nginx
          echo "🌐 Configuring Nginx..."
          cat > /etc/nginx/sites-available/wedding-dashboard << 'EOF'
          server {
              listen 80;
              server_name _;
          
              client_max_body_size 10M;
          
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl reload nginx
          echo "✓ Nginx configured"
          
          # Restart application with PM2
          echo "🚀 Starting/Restarting application..."
          pm2 delete wedding-api 2>/dev/null || true
          pm2 delete wedding-worker 2>/dev/null || true
          
          # Start API server
          if pm2 start backend/src/server.js --name wedding-api --log-date-format "YYYY-MM-DD HH:mm:ss Z"; then
            echo "✓ API server started"
          else
            echo "❌ Failed to start API server"
            exit 1
          fi
          
          # Start worker (non-critical)
          if pm2 start backend/src/workers/thankYouWorker.js --name wedding-worker --log-date-format "YYYY-MM-DD HH:mm:ss Z"; then
            echo "✓ Worker started"
          else
            echo "⚠️  Worker failed to start (non-critical)"
          fi
          
          pm2 save
          
          # Setup PM2 startup
          env PATH=$PATH:/usr/bin pm2 startup systemd -u root --hp /root > /dev/null 2>&1 || true
          pm2 save
          
          echo "✓ Application deployed and running"
          
          # Wait for services to stabilize
          echo "⏳ Waiting for services to stabilize..."
          sleep 3
          
          # Check if API is responding
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✓ API health check passed"
          else
            echo "⚠️  API health check failed, checking logs..."
            pm2 logs wedding-api --lines 30 --nostream
          fi
          
          # Configure firewall
          echo "🔥 Configuring firewall..."
          if command -v ufw &> /dev/null; then
            ufw allow 22/tcp 2>/dev/null || true
            ufw allow 80/tcp 2>/dev/null || true
            ufw allow 443/tcp 2>/dev/null || true
            ufw --force enable 2>/dev/null || true
            echo "✓ Firewall configured"
          fi
          
          # Get server IP
          SERVER_IP=$(hostname -I | awk '{print $1}')
          
          echo ""
          echo "================================================"
          echo "✨ Deployment completed successfully!"
          echo "================================================"
          echo ""
          echo "📊 Application Information:"
          echo "   - Server IP: ${SERVER_IP}"
          echo "   - URL: http://${SERVER_IP}"
          echo ""
          echo "📝 PM2 Status:"
          pm2 status
          echo ""
          echo "🌐 Access your dashboard at: http://${SERVER_IP}"
          echo "================================================"
        ENDSSH
    
    - name: Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 5
        
        # Check HTTP response
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }})
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
          echo "✅ Deployment successful! Application is responding."
        else
          echo "⚠️  Warning: Application returned HTTP code $HTTP_CODE"
          exit 1
        fi
        
        # Check PM2 processes
        echo ""
        echo "🔍 Checking PM2 processes..."
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          pm2 status
          
          # Check if processes are running
          API_STATUS=$(pm2 jlist | jq -r '.[] | select(.name=="wedding-api") | .pm2_env.status')
          WORKER_STATUS=$(pm2 jlist | jq -r '.[] | select(.name=="wedding-worker") | .pm2_env.status')
          
          echo ""
          echo "📊 Process Status:"
          echo "   - API: ${API_STATUS:-not found}"
          echo "   - Worker: ${WORKER_STATUS:-not found}"
          
          if [ "$API_STATUS" != "online" ]; then
            echo "❌ API process is not running!"
            exit 1
          fi
          
          if [ "$WORKER_STATUS" != "online" ]; then
            echo "⚠️  Worker process is not running (non-critical)"
          fi
          
          echo ""
          echo "📜 Recent API logs:"
          pm2 logs wedding-api --lines 20 --nostream
          
          echo ""
          echo "🔍 Verifying database schema post-deployment..."
          cd /root/dashboard
          if npm run verify-schema; then
            echo "✅ Database schema verification passed!"
          else
            echo "⚠️  Database schema verification failed - check logs above"
          fi
        ENDSSH
        
        echo ""
        echo "✅ Deployment verification completed successfully!"
    
    - name: Test QR Code Functionality
      run: |
        echo ""
        echo "🔍 Testing QR Code and WhatsApp API functionality..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        if curl -f http://${{ secrets.VPS_HOST }}/health 2>/dev/null; then
          echo "✓ Health check passed"
        else
          echo "⚠️  Health check failed"
        fi
        
        # Check if WhatsApp API endpoint is accessible
        echo ""
        echo "Testing WhatsApp API availability..."
        if curl -f http://${{ secrets.VPS_HOST }}/api/whatsapp/status 2>/dev/null; then
          echo "✓ WhatsApp API is accessible"
        else
          echo "ℹ️  WhatsApp API may not be fully configured (this is normal on first deployment)"
        fi
        
        echo ""
        echo "📋 QR Code Feature Checklist:"
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /root/dashboard
          
          # Check if QR code columns exist in database
          echo "Checking database schema for QR code columns..."
          QR_COLUMNS=$(psql -U wedding_user -d wedding_dashboard -tAc "
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='guests' 
            AND column_name IN ('qr_code_token', 'qr_code_url', 'qr_code_generated_at')
            ORDER BY column_name
          " 2>/dev/null)
          
          if [ -n "$QR_COLUMNS" ]; then
            echo "✅ QR Code columns found in database:"
            echo "$QR_COLUMNS" | while read col; do echo "   ✓ $col"; done
          else
            echo "⚠️  QR Code columns not found - migrations may need to run"
          fi
          
          # Check if invitation_link column exists
          echo ""
          echo "Checking for invitation_link column..."
          INV_COLUMN=$(psql -U wedding_user -d wedding_dashboard -tAc "
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='guests' 
            AND column_name='invitation_link'
          " 2>/dev/null)
          
          if [ -n "$INV_COLUMN" ]; then
            echo "✅ invitation_link column found"
          else
            echo "⚠️  invitation_link column not found"
          fi
        ENDSSH
    
    - name: Post-Deployment Summary
      if: always()
      run: |
        echo ""
        echo "================================================"
        echo "📋 Deployment Summary"
        echo "================================================"
        echo "Repository: bengkelkayu/dashboard"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Deploy Type: ${{ env.DEPLOY_TYPE }}"
        echo "Trigger: ${{ github.event_name }}"
        echo "Deployed to: http://${{ secrets.VPS_HOST }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "================================================"
