name: Deploy to VPS

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - app-only
          - setup-only

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to VPS (Full Setup)
      if: ${{ github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'setup-only' }}
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "================================================"
          echo "üöÄ Starting VPS Setup and Deployment"
          echo "================================================"
          
          # Update system
          echo "üì¶ Updating system packages..."
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get upgrade -y
          
          # Install Node.js v18
          echo "üì¶ Installing Node.js..."
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            echo "‚úì Node.js installed: $(node --version)"
          else
            echo "‚úì Node.js already installed: $(node --version)"
          fi
          
          # Install PostgreSQL
          echo "üì¶ Installing PostgreSQL..."
          if ! command -v psql &> /dev/null; then
            apt-get install -y postgresql postgresql-contrib
            systemctl start postgresql
            systemctl enable postgresql
            echo "‚úì PostgreSQL installed"
          else
            echo "‚úì PostgreSQL already installed"
          fi
          
          # Install Redis
          echo "üì¶ Installing Redis..."
          if ! command -v redis-cli &> /dev/null; then
            apt-get install -y redis-server
            systemctl start redis-server
            systemctl enable redis-server
            echo "‚úì Redis installed"
          else
            echo "‚úì Redis already installed"
          fi
          
          # Install Nginx
          echo "üì¶ Installing Nginx..."
          if ! command -v nginx &> /dev/null; then
            apt-get install -y nginx
            systemctl start nginx
            systemctl enable nginx
            echo "‚úì Nginx installed"
          else
            echo "‚úì Nginx already installed"
          fi
          
          # Install PM2
          echo "üì¶ Installing PM2..."
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
            echo "‚úì PM2 installed"
          else
            echo "‚úì PM2 already installed"
          fi
          
          # Install Git
          if ! command -v git &> /dev/null; then
            apt-get install -y git
            echo "‚úì Git installed"
          fi
          
          echo "‚ú® System setup completed!"
        ENDSSH
    
    - name: Deploy Application
      if: ${{ github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'app-only' }}
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "================================================"
          echo "üì¶ Deploying Application"
          echo "================================================"
          
          # Create deployment directory
          DEPLOY_DIR="/root/dashboard"
          
          # Clone or update repository
          if [ -d "$DEPLOY_DIR" ]; then
            echo "üì• Updating existing repository..."
            cd $DEPLOY_DIR
            git fetch origin
            git reset --hard origin/main
          else
            echo "üì• Cloning repository..."
            cd /root
            git clone https://github.com/bengkelkayu/dashboard.git
            cd $DEPLOY_DIR
          fi
          
          # Install dependencies
          echo "üì¶ Installing application dependencies..."
          npm install --production
          
          # Setup database if not exists
          echo "üóÑÔ∏è  Setting up database..."
          DB_NAME="wedding_dashboard"
          DB_USER="wedding_user"
          
          # Check if database exists
          DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
          
          if [ -z "$DB_EXISTS" ]; then
            echo "Creating new database..."
            DB_PASSWORD=$(openssl rand -base64 32)
            
            sudo -u postgres psql << EOF
          -- Create user if not exists
          DO \$\$
          BEGIN
              IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '${DB_USER}') THEN
                  CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';
              END IF;
          END
          \$\$;
          
          -- Create database
          CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};
          GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};
          EOF
            
            # Create .env file
            cat > .env << EOF
          # Server Configuration
          PORT=3000
          NODE_ENV=production
          
          # Database Configuration
          DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:5432/${DB_NAME}
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          
          # Redis Configuration
          REDIS_URL=redis://localhost:6379
          
          # WhatsApp API Configuration
          WHATSAPP_API_URL=https://api.whatsapp.com/send
          WHATSAPP_API_KEY=your_api_key_here
          
          # Webhook Secret
          WEBHOOK_SECRET=$(openssl rand -hex 32)
          
          # Application Configuration
          CORS_ORIGIN=*
          EOF
            
            echo "‚úì Database and .env created"
            echo "üìù Database Password: ${DB_PASSWORD}"
          else
            echo "‚úì Database already exists, skipping creation"
            # Ensure .env exists
            if [ ! -f .env ]; then
              echo "‚ö†Ô∏è  Warning: .env file not found. Please create it manually."
            fi
          fi
          
          # Run migrations
          echo "üóÑÔ∏è  Running database migrations..."
          npm run migrate || echo "‚ö†Ô∏è  Migrations failed or already applied"
          
          # Configure Nginx
          echo "üåê Configuring Nginx..."
          cat > /etc/nginx/sites-available/wedding-dashboard << 'EOF'
          server {
              listen 80;
              server_name _;
          
              client_max_body_size 10M;
          
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl reload nginx
          echo "‚úì Nginx configured"
          
          # Restart application with PM2
          echo "üöÄ Starting/Restarting application..."
          pm2 delete wedding-api 2>/dev/null || true
          pm2 delete wedding-worker 2>/dev/null || true
          
          pm2 start backend/src/server.js --name wedding-api --log-date-format "YYYY-MM-DD HH:mm:ss Z"
          pm2 start backend/src/workers/thankYouWorker.js --name wedding-worker --log-date-format "YYYY-MM-DD HH:mm:ss Z"
          pm2 save
          
          # Setup PM2 startup
          env PATH=$PATH:/usr/bin pm2 startup systemd -u root --hp /root > /dev/null 2>&1 || true
          pm2 save
          
          echo "‚úì Application deployed and running"
          
          # Configure firewall
          echo "üî• Configuring firewall..."
          if command -v ufw &> /dev/null; then
            ufw allow 22/tcp 2>/dev/null || true
            ufw allow 80/tcp 2>/dev/null || true
            ufw allow 443/tcp 2>/dev/null || true
            ufw --force enable 2>/dev/null || true
            echo "‚úì Firewall configured"
          fi
          
          # Get server IP
          SERVER_IP=$(hostname -I | awk '{print $1}')
          
          echo ""
          echo "================================================"
          echo "‚ú® Deployment completed successfully!"
          echo "================================================"
          echo ""
          echo "üìä Application Information:"
          echo "   - Server IP: ${SERVER_IP}"
          echo "   - URL: http://${SERVER_IP}"
          echo ""
          echo "üìù PM2 Status:"
          pm2 status
          echo ""
          echo "üåê Access your dashboard at: http://${SERVER_IP}"
          echo "================================================"
        ENDSSH
    
    - name: Verify Deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 5
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }})
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
          echo "‚úÖ Deployment successful! Application is responding."
        else
          echo "‚ö†Ô∏è  Warning: Application returned HTTP code $HTTP_CODE"
        fi
