name: Setup lovejourney.cloud Domain (One-Click)

on:
  workflow_dispatch:
    inputs:
      confirm_setup:
        description: 'Type "yes" to confirm full setup (deploy + SSL)'
        required: true
        default: 'yes'
        type: string

jobs:
  complete-setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_setup }}" != "yes" ]; then
          echo "‚ùå Setup cancelled. Please type 'yes' to confirm."
          exit 1
        fi
        echo "‚úÖ Setup confirmed. Starting complete deployment..."
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
    
    - name: Step 1 - System Setup & Dependencies
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo "================================================"
        echo "üöÄ STEP 1: Installing System Dependencies"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          echo "üîÑ Updating system packages..."
          export DEBIAN_FRONTEND=noninteractive
          apt-get update && apt-get upgrade -y
          
          echo "üì¶ Installing Node.js v20..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          echo "‚úì Node.js installed: $(node --version)"
          
          echo "üì¶ Installing PostgreSQL..."
          if ! command -v psql &> /dev/null; then
            apt-get install -y postgresql postgresql-contrib
            systemctl start postgresql && systemctl enable postgresql
            echo "‚úì PostgreSQL installed"
          else
            echo "‚úì PostgreSQL already installed"
          fi
          
          echo "üì¶ Installing Redis..."
          if ! command -v redis-cli &> /dev/null; then
            apt-get install -y redis-server
            systemctl start redis-server && systemctl enable redis-server
            echo "‚úì Redis installed"
          else
            echo "‚úì Redis already installed"
          fi
          
          echo "üì¶ Installing Nginx..."
          if ! command -v nginx &> /dev/null; then
            apt-get install -y nginx
            systemctl start nginx && systemctl enable nginx
            echo "‚úì Nginx installed"
          else
            echo "‚úì Nginx already installed"
          fi
          
          echo "üì¶ Installing PM2..."
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
            echo "‚úì PM2 installed"
          else
            echo "‚úì PM2 already installed"
          fi
          
          echo "üì¶ Installing Git..."
          if ! command -v git &> /dev/null; then
            apt-get install -y git
            echo "‚úì Git installed"
          else
            echo "‚úì Git already installed"
          fi
          
          echo ""
          echo "‚úÖ Step 1 Complete: System dependencies installed!"
        ENDSSH
    
    - name: Step 2 - Deploy Application
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo ""
        echo "================================================"
        echo "üì¶ STEP 2: Deploying Application"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} 'bash -s' << 'ENDSSH'
          set -e
          
          DEPLOY_DIR="/root/dashboard"
          
          echo "üì• Cloning/Updating repository..."
          if [ -d "$DEPLOY_DIR" ]; then
            cd $DEPLOY_DIR
            git fetch origin
            git reset --hard origin/main
            echo "‚úì Repository updated"
          else
            cd /root
            git clone https://github.com/bengkelkayu/dashboard.git
            cd $DEPLOY_DIR
            echo "‚úì Repository cloned"
          fi
          
          echo "üì¶ Installing npm dependencies..."
          npm install --production
          echo "‚úì Dependencies installed"
          
          DB_NAME="wedding_dashboard"
          DB_USER="wedding_user"
          
          echo "üóÑÔ∏è  Setting up database..."
          DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
          
          if [ -z "$DB_EXISTS" ]; then
            DB_PASSWORD=$(openssl rand -base64 32)
            
            USER_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_user WHERE usename = '${DB_USER}'")
            if [ -z "$USER_EXISTS" ]; then
              echo "CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';" | sudo -u postgres psql
              echo "‚úì Database user created"
            fi
            
            echo "CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};" | sudo -u postgres psql
            echo "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};" | sudo -u postgres psql
            printf "PORT=3000\nNODE_ENV=production\nDATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:5432/${DB_NAME}\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=${DB_NAME}\nDB_USER=${DB_USER}\nDB_PASSWORD=${DB_PASSWORD}\nREDIS_URL=redis://localhost:6379\nWHATSAPP_API_URL=https://api.whatsapp.com/send\nWHATSAPP_API_KEY=your_api_key_here\nWEBHOOK_SECRET=$(openssl rand -hex 32)\nCORS_ORIGIN=https://lovejourney.cloud\n" > .env
            echo "‚úì Database created and environment configured"
          else
            echo "‚úì Database already exists"
            # Update CORS_ORIGIN in existing .env
            if [ -f .env ]; then
              if grep -q "^CORS_ORIGIN=" .env; then
                sed -i "s|^CORS_ORIGIN=.*|CORS_ORIGIN=https://lovejourney.cloud|" .env
              else
                echo "CORS_ORIGIN=https://lovejourney.cloud" >> .env
              fi
            fi
          fi
          
          echo "üîç Running database migrations..."
          npm run migrate || echo "‚ö†Ô∏è  Migration warning (may already be applied)"
          
          echo "‚úÖ Step 2 Complete: Application deployed!"
        ENDSSH
    
    - name: Step 3 - Configure Nginx (HTTP - Temporary)
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo ""
        echo "================================================"
        echo "üåê STEP 3: Configuring Nginx"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "üåê Creating Nginx configuration..."
          printf "server {\n    listen 80;\n    server_name lovejourney.cloud www.lovejourney.cloud;\n    \n    client_max_body_size 10M;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \$host;\n        proxy_set_header X-Real-IP \$remote_addr;\n        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \$scheme;\n        proxy_cache_bypass \$http_upgrade;\n    }\n}\n" > /etc/nginx/sites-available/wedding-dashboard
          
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          echo "üß™ Testing Nginx configuration..."
          nginx -t
          
          echo "üîÑ Reloading Nginx..."
          systemctl reload nginx
          
          echo "‚úÖ Step 3 Complete: Nginx configured!"
        ENDSSH
    
    - name: Step 4 - Start Application
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo ""
        echo "================================================"
        echo "üöÄ STEP 4: Starting Application"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          cd /root/dashboard
          
          echo "üóëÔ∏è  Removing old PM2 processes..."
          pm2 delete wedding-api wedding-worker 2>/dev/null || true
          
          echo "‚ñ∂Ô∏è  Starting API server..."
          pm2 start backend/src/server.js --name wedding-api
          
          echo "‚ñ∂Ô∏è  Starting background worker..."
          pm2 start backend/src/workers/thankYouWorker.js --name wedding-worker
          
          echo "üíæ Saving PM2 configuration..."
          pm2 save
          
          echo "üîÑ Enabling PM2 startup..."
          env PATH=$PATH:/usr/bin pm2 startup systemd -u root --hp /root || true
          
          echo "üìä PM2 Status:"
          pm2 status
          
          echo "‚úÖ Step 4 Complete: Application running!"
        ENDSSH
    
    - name: Step 5 - Configure Firewall
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo ""
        echo "================================================"
        echo "üî• STEP 5: Configuring Firewall"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          if command -v ufw &> /dev/null; then
            echo "üî• Allowing required ports..."
            ufw allow 22/tcp  # SSH
            ufw allow 80/tcp  # HTTP
            ufw allow 443/tcp # HTTPS
            ufw --force enable || true
            echo "‚úÖ Firewall configured"
          else
            echo "‚ÑπÔ∏è  UFW not installed, skipping firewall configuration"
          fi
          
          echo "‚úÖ Step 5 Complete: Firewall configured!"
        ENDSSH
    
    - name: Step 6 - Verify DNS Configuration
      run: |
        echo ""
        echo "================================================"
        echo "üîç STEP 6: Verifying DNS Configuration"
        echo "================================================"
        
        echo "Checking if lovejourney.cloud points to VPS..."
        DOMAIN_IP=$(dig +short lovejourney.cloud | head -n1)
        VPS_IP="${{ secrets.VPS_HOST }}"
        
        echo "Domain IP: $DOMAIN_IP"
        echo "VPS IP: $VPS_IP"
        
        if [ "$DOMAIN_IP" != "$VPS_IP" ]; then
          echo ""
          echo "‚ö†Ô∏è  WARNING: Domain does not point to VPS yet!"
          echo ""
          echo "Please configure your DNS settings:"
          echo "  Provider: Your domain registrar"
          echo "  Type: A Record"
          echo "  Name: @"
          echo "  Value: $VPS_IP"
          echo "  TTL: Auto"
          echo ""
          echo "Also add www subdomain:"
          echo "  Type: A Record"
          echo "  Name: www"
          echo "  Value: $VPS_IP"
          echo ""
          echo "‚ö†Ô∏è  SSL setup will be skipped until DNS is configured!"
          echo "After DNS propagation (5-10 minutes), run this workflow again."
          exit 1
        fi
        
        echo "‚úÖ Step 6 Complete: DNS correctly configured!"
    
    - name: Step 7 - Setup SSL/HTTPS
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo ""
        echo "================================================"
        echo "üîê STEP 7: Setting up SSL/HTTPS"
        echo "================================================"
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "üì¶ Installing Certbot..."
          if ! command -v certbot &> /dev/null; then
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y certbot python3-certbot-nginx
            echo "‚úì Certbot installed"
          else
            echo "‚úì Certbot already installed"
          fi
          
          echo "‚è∏Ô∏è  Stopping Nginx temporarily..."
          systemctl stop nginx
          
          echo "üîê Obtaining SSL certificate for lovejourney.cloud..."
          certbot certonly --standalone \
            --non-interactive \
            --agree-tos \
            --email "rahul.ok63@gmail.com" \
            -d "lovejourney.cloud" \
            -d "www.lovejourney.cloud" \
            --preferred-challenges http
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to obtain SSL certificate"
            systemctl start nginx
            exit 1
          fi
          
          echo "‚úì SSL certificate obtained successfully!"
          
          echo "üåê Updating Nginx configuration with SSL..."
          cat > /etc/nginx/sites-available/wedding-dashboard << 'NGINXEOF'
          # HTTP - Redirect to HTTPS
          server {
              listen 80;
              server_name lovejourney.cloud www.lovejourney.cloud;
              
              # Allow Let's Encrypt validation
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              
              # Redirect all other traffic to HTTPS
              location / {
                  return 301 https://lovejourney.cloud$request_uri;
              }
          }
          
          # HTTPS - Main application
          server {
              listen 443 ssl http2;
              server_name lovejourney.cloud www.lovejourney.cloud;
              
              # SSL Configuration
              ssl_certificate /etc/letsencrypt/live/lovejourney.cloud/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/lovejourney.cloud/privkey.pem;
              
              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;
              
              # Security Headers
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              client_max_body_size 10M;
              
              # Proxy to Node.js application
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINXEOF
          
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          
          echo "üß™ Testing Nginx configuration..."
          if ! nginx -t; then
            echo "‚ùå Nginx configuration test failed"
            exit 1
          fi
          
          echo "‚ñ∂Ô∏è  Starting Nginx..."
          systemctl start nginx
          systemctl enable nginx
          
          echo "‚úì Nginx with SSL started successfully!"
          
          echo "üîÑ Setting up SSL auto-renewal..."
          mkdir -p /etc/letsencrypt/renewal-hooks/deploy
          cat > /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh << 'HOOKEOF'
          #!/bin/bash
          systemctl reload nginx
          HOOKEOF
          chmod +x /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh
          
          echo "üß™ Testing SSL renewal process (dry run)..."
          if certbot renew --dry-run; then
            echo "‚úì SSL auto-renewal configured successfully"
          else
            echo "‚ö†Ô∏è  SSL renewal test failed, but certificate is installed"
          fi
          
          # Create systemd timer for auto-renewal
          cat > /etc/systemd/system/certbot-renewal.service << 'SERVICEEOF'
          [Unit]
          Description=Certbot Renewal
          
          [Service]
          Type=oneshot
          ExecStart=/usr/bin/certbot renew --quiet --post-hook "systemctl reload nginx"
          SERVICEEOF
          
          cat > /etc/systemd/system/certbot-renewal.timer << 'TIMEREOF'
          [Unit]
          Description=Certbot Renewal Timer
          
          [Timer]
          OnCalendar=daily
          RandomizedDelaySec=1h
          Persistent=true
          
          [Install]
          WantedBy=timers.target
          TIMEREOF
          
          systemctl enable certbot-renewal.timer
          systemctl start certbot-renewal.timer
          
          echo "‚úì Auto-renewal timer enabled"
          
          echo "üîÑ Restarting application..."
          cd /root/dashboard
          pm2 restart all
          
          echo ""
          echo "‚úÖ Step 7 Complete: SSL/HTTPS configured!"
        ENDSSH
    
    - name: Step 8 - Final Verification
      run: |
        echo ""
        echo "================================================"
        echo "‚úÖ STEP 8: Final Verification"
        echo "================================================"
        
        echo "‚è≥ Waiting for services to stabilize..."
        sleep 10
        
        echo "üîç Testing HTTPS connection..."
        if curl -fsSL -o /dev/null -w "HTTP Status: %{http_code}\n" https://lovejourney.cloud; then
          echo "‚úÖ HTTPS is working!"
        else
          echo "‚ö†Ô∏è  HTTPS connection test failed"
          exit 1
        fi
        
        echo ""
        echo "üîê SSL Certificate Details:"
        echo | openssl s_client -servername lovejourney.cloud -connect lovejourney.cloud:443 2>/dev/null | openssl x509 -noout -dates
        
        echo ""
        echo "‚úÖ Step 8 Complete: All verifications passed!"
    
    - name: Setup Complete Summary
      if: always()
      run: |
        echo ""
        echo "================================================"
        echo "üéâ SETUP COMPLETE!"
        echo "================================================"
        echo ""
        echo "‚úÖ All steps completed successfully!"
        echo ""
        echo "üìã What was configured:"
        echo "  ‚úÖ System dependencies (Node.js, PostgreSQL, Redis, Nginx, PM2)"
        echo "  ‚úÖ Application deployed from GitHub"
        echo "  ‚úÖ Database created and migrated"
        echo "  ‚úÖ Nginx configured as reverse proxy"
        echo "  ‚úÖ SSL/HTTPS certificate installed (Let's Encrypt)"
        echo "  ‚úÖ Auto-renewal enabled"
        echo "  ‚úÖ Firewall configured"
        echo "  ‚úÖ Application running with PM2"
        echo ""
        echo "üåê Your wedding dashboard is now live at:"
        echo "   https://lovejourney.cloud"
        echo ""
        echo "üì± QR Scanner will work properly with camera access!"
        echo ""
        echo "üîê SSL Certificate:"
        echo "   Domain: lovejourney.cloud"
        echo "   Email: rahul.ok63@gmail.com"
        echo "   Auto-renewal: Every 60 days"
        echo ""
        echo "üìä Access your VPS to check status:"
        echo "   ssh root@${{ secrets.VPS_HOST }}"
        echo "   pm2 status"
        echo "   certbot certificates"
        echo ""
        echo "================================================"
