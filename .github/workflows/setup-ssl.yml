name: Setup SSL/HTTPS Certificate

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name for SSL certificate (e.g., example.com or wedding.example.com)'
        required: true
        type: string
      email:
        description: 'Email address for Let''s Encrypt notifications'
        required: true
        type: string

jobs:
  setup-ssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
    
    - name: Verify Domain Points to VPS
      run: |
        echo "üîç Checking if domain points to VPS..."
        DOMAIN_IP=$(dig +short ${{ github.event.inputs.domain }} | head -n1)
        VPS_IP="${{ secrets.VPS_HOST }}"
        
        echo "Domain IP: $DOMAIN_IP"
        echo "VPS IP: $VPS_IP"
        
        if [ "$DOMAIN_IP" != "$VPS_IP" ]; then
          echo "‚ö†Ô∏è  WARNING: Domain ${{ github.event.inputs.domain }} does not point to VPS IP $VPS_IP"
          echo "Current domain IP: $DOMAIN_IP"
          echo ""
          echo "Please update your DNS records:"
          echo "  Type: A"
          echo "  Name: @ (or subdomain)"
          echo "  Value: $VPS_IP"
          echo ""
          echo "Wait 5-10 minutes for DNS propagation, then run this workflow again."
          exit 1
        fi
        
        echo "‚úÖ Domain correctly points to VPS"
    
    - name: Install and Configure SSL Certificate
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          echo "================================================"
          echo "üîê Setting up SSL/HTTPS Certificate"
          echo "================================================"
          
          # Install certbot if not already installed
          echo "üì¶ Installing Certbot..."
          if ! command -v certbot &> /dev/null; then
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y certbot python3-certbot-nginx
            echo "‚úì Certbot installed"
          else
            echo "‚úì Certbot already installed"
          fi
          
          # Stop nginx temporarily for standalone certbot
          echo "‚è∏Ô∏è  Stopping Nginx temporarily..."
          systemctl stop nginx
          
          # Obtain SSL certificate
          echo "üîê Obtaining SSL certificate for ${{ github.event.inputs.domain }}..."
          certbot certonly --standalone \
            --non-interactive \
            --agree-tos \
            --email "${{ github.event.inputs.email }}" \
            -d "${{ github.event.inputs.domain }}" \
            --preferred-challenges http
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to obtain SSL certificate"
            systemctl start nginx
            exit 1
          fi
          
          echo "‚úì SSL certificate obtained successfully"
          
          # Update Nginx configuration with SSL
          echo "üåê Updating Nginx configuration..."
          cat > /etc/nginx/sites-available/wedding-dashboard << 'NGINXCONF'
          # HTTP - Redirect to HTTPS
          server {
              listen 80;
              server_name ${{ github.event.inputs.domain }};
          
              # Allow Let's Encrypt validation
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
          
              # Redirect all other traffic to HTTPS
              location / {
                  return 301 https://$server_name$request_uri;
              }
          }
          
          # HTTPS - Main application
          server {
              listen 443 ssl http2;
              server_name ${{ github.event.inputs.domain }};
          
              # SSL Configuration
              ssl_certificate /etc/letsencrypt/live/${{ github.event.inputs.domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ github.event.inputs.domain }}/privkey.pem;
              
              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;
              
              # Security Headers
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
          
              client_max_body_size 10M;
          
              # Proxy to Node.js application
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINXCONF
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/wedding-dashboard /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration
          echo "üß™ Testing Nginx configuration..."
          if ! nginx -t; then
            echo "‚ùå Nginx configuration test failed"
            exit 1
          fi
          
          # Start nginx
          echo "‚ñ∂Ô∏è  Starting Nginx..."
          systemctl start nginx
          systemctl enable nginx
          
          echo "‚úì Nginx configured and started"
          
          # Setup automatic SSL renewal
          echo "üîÑ Setting up automatic SSL renewal..."
          
          # Create renewal hook to reload nginx
          mkdir -p /etc/letsencrypt/renewal-hooks/deploy
          cat > /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh << 'HOOKEOF'
          #!/bin/bash
          systemctl reload nginx
          HOOKEOF
          chmod +x /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh
          
          # Test renewal process (dry run)
          echo "üß™ Testing SSL renewal process..."
          if certbot renew --dry-run; then
            echo "‚úì SSL auto-renewal configured successfully"
          else
            echo "‚ö†Ô∏è  SSL renewal test failed, but certificate is installed"
          fi
          
          # Create a systemd timer for auto-renewal (backup to certbot's default)
          cat > /etc/systemd/system/certbot-renewal.service << 'SERVICEEOF'
          [Unit]
          Description=Certbot Renewal
          
          [Service]
          Type=oneshot
          ExecStart=/usr/bin/certbot renew --quiet --post-hook "systemctl reload nginx"
          SERVICEEOF
          
          cat > /etc/systemd/system/certbot-renewal.timer << 'TIMEREOF'
          [Unit]
          Description=Certbot Renewal Timer
          
          [Timer]
          OnCalendar=daily
          RandomizedDelaySec=1h
          Persistent=true
          
          [Install]
          WantedBy=timers.target
          TIMEREOF
          
          systemctl enable certbot-renewal.timer
          systemctl start certbot-renewal.timer
          
          echo "‚úì Auto-renewal timer enabled"
          
          echo ""
          echo "================================================"
          echo "‚úÖ SSL/HTTPS Setup Completed!"
          echo "================================================"
          echo ""
          echo "üîê SSL Certificate Information:"
          certbot certificates
          echo ""
          echo "üåê Your site is now accessible at:"
          echo "   https://${{ github.event.inputs.domain }}"
          echo ""
          echo "üìù Certificate will auto-renew every 60 days"
          echo "================================================"
        ENDSSH
    
    - name: Update Environment Configuration
      env:
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        echo "üîß Updating application configuration..."
        sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /root/dashboard
          
          # Update CORS_ORIGIN in .env if it exists
          if [ -f .env ]; then
            echo "Updating CORS_ORIGIN in .env..."
            if grep -q "^CORS_ORIGIN=" .env; then
              sed -i "s|^CORS_ORIGIN=.*|CORS_ORIGIN=https://${{ github.event.inputs.domain }}|" .env
            else
              echo "CORS_ORIGIN=https://${{ github.event.inputs.domain }}" >> .env
            fi
            
            echo "‚úì Environment updated"
            
            # Restart application
            echo "üîÑ Restarting application..."
            pm2 restart all
            
            echo "‚úì Application restarted"
          fi
        ENDSSH
    
    - name: Verify SSL Setup
      run: |
        echo "üîç Verifying SSL setup..."
        sleep 5
        
        # Check HTTPS response
        echo "Testing HTTPS connection..."
        if curl -fsSL -o /dev/null -w "HTTP Status: %{http_code}\n" https://${{ github.event.inputs.domain }}; then
          echo "‚úÖ HTTPS is working!"
        else
          echo "‚ö†Ô∏è  HTTPS connection failed. Please check the configuration."
          exit 1
        fi
        
        # Check SSL certificate
        echo ""
        echo "SSL Certificate Details:"
        echo | openssl s_client -servername ${{ github.event.inputs.domain }} -connect ${{ github.event.inputs.domain }}:443 2>/dev/null | openssl x509 -noout -dates
    
    - name: Setup Summary
      if: always()
      run: |
        echo ""
        echo "================================================"
        echo "üìã SSL Setup Summary"
        echo "================================================"
        echo "Domain: ${{ github.event.inputs.domain }}"
        echo "Email: ${{ github.event.inputs.email }}"
        echo "VPS: ${{ secrets.VPS_HOST }}"
        echo ""
        echo "üåê Access your dashboard at:"
        echo "   https://${{ github.event.inputs.domain }}"
        echo ""
        echo "üì± QR Scanner will now work properly with camera access!"
        echo ""
        echo "üîÑ Certificate auto-renewal: Enabled"
        echo "   Certificates will auto-renew 30 days before expiry"
        echo ""
        echo "================================================"
